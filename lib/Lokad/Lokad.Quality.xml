<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Lokad.Quality</name>
  </assembly>
  <members>
    <member name="T:GlobalAssemblyInfo">
      <summary>
             Assembly information class that is shared between all projects
            </summary>
    </member>
    <member name="T:Lokad.Quality.CecilExtensions">
      <summary>
            Helper methods to simplify the usage of Mono.Cecil
            </summary>
    </member>
    <member name="M:Lokad.Quality.CecilExtensions.GetAllMethods(Mono.Cecil.TypeDefinition,Lokad.IProvider{Mono.Cecil.TypeReference,Mono.Cecil.TypeDefinition})">
      <summary>
            Gets all methods for the provided <see cref="T:Mono.Cecil.TypeDefinition" />. 
            This includes walking all the way up the inheritance chain, excluding
            the <see cref="T:System.Object" /></summary>
      <param name="self">The <see cref="T:Mono.Cecil.TypeDefinition" /> to check.</param>
      <param name="provider">The resolution provider.</param>
      <returns>lazy collection of methods</returns>
      <seealso cref="T:Lokad.Quality.Codebase" />
    </member>
    <member name="M:Lokad.Quality.CecilExtensions.GetInheritance(Mono.Cecil.TypeDefinition,Lokad.IProvider{Mono.Cecil.TypeReference,Mono.Cecil.TypeDefinition})">
      <summary>
            Gets the inheritance tree of the provided type.
            </summary>
      <param name="definition">The definition.</param>
      <param name="provider">The provider.</param>
      <returns>lazy enumerator</returns>
    </member>
    <member name="M:Lokad.Quality.CecilExtensions.GetAllFields(Mono.Cecil.TypeDefinition,Lokad.IProvider{Mono.Cecil.TypeReference,Mono.Cecil.TypeDefinition})">
      <summary>
            Gets all fields for the provided <see cref="T:Mono.Cecil.TypeDefinition" />. 
            This includes walking all the way up the inheritance chain, excluding
            the <see cref="T:System.Object" /></summary>
      <param name="self">The <see cref="T:Mono.Cecil.TypeDefinition" /> to check.</param>
      <param name="provider">The resolution provider.</param>
      <returns>lazy collection of fields</returns>
      <seealso cref="T:Lokad.Quality.Codebase" />
    </member>
    <member name="T:Lokad.Quality.Codebase">
      <summary>
            Base class that serves as validation target for the Lokad
            quality rules
            </summary>
    </member>
    <member name="M:Lokad.Quality.Codebase.SaveTo(System.String)">
      <summary>
            Saves the entire codebase to the specified folder.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Lokad.Quality.Codebase.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:Lokad.Quality.Codebase" /> class.
            </summary>
      <param name="assembliesToAnalyze">The assemblies to load.</param>
    </member>
    <member name="M:Lokad.Quality.Codebase.GetAllTypeReferences">
      <summary>
            Gets all the external type references in the codebase.
            </summary>
      <returns>lazy enumerator over the results.</returns>
    </member>
    <member name="M:Lokad.Quality.Codebase.Find``1">
      <summary>
            Gets the type based on the .NET type.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="P:Lokad.Quality.Codebase.Methods">
      <summary>
            Methods declared in the assemblies being checked
            </summary>
      <value>The collection of methods.</value>
    </member>
    <member name="P:Lokad.Quality.Codebase.Types">
      <summary>
            Types declared in the assemblies being checked
            </summary>
      <value>The collection of types.</value>
    </member>
    <member name="T:Lokad.Quality.AssemblyDefinitionExtensions">
      <summary>
            Helper extensions for the <see cref="T:Mono.Cecil.AssemblyDefinition" /></summary>
    </member>
    <member name="M:Lokad.Quality.AssemblyDefinitionExtensions.GetModules(Mono.Cecil.AssemblyDefinition)">
      <summary>
            Gets the modules.
            </summary>
      <param name="self">The self.</param>
      <returns>list of modules for the provided assembly definition</returns>
    </member>
    <member name="M:Lokad.Quality.AssemblyDefinitionExtensions.GetAssemblyReferences(Mono.Cecil.AssemblyDefinition)">
      <summary>
            Gets all assembly references for the modules in the provided <see cref="T:Mono.Cecil.AssemblyDefinition" />.
            </summary>
      <param name="self">The assembly definition to check.</param>
      <returns>enumerable of the assembly references</returns>
      <remarks>This is a lazy routine</remarks>
    </member>
    <member name="M:Lokad.Quality.AssemblyDefinitionExtensions.GetAllTypes(Mono.Cecil.AssemblyDefinition)">
      <summary>
            Gets all <see cref="T:Mono.Cecil.TypeDefinition" /> entries for the modules in the provided
            <see cref="T:Mono.Cecil.AssemblyDefinition" />. 
            </summary>
      <param name="self">The assembly definition to scan.</param>
      <returns>This is a lazy routine</returns>
    </member>
    <member name="M:Lokad.Quality.AssemblyDefinitionExtensions.GetTypes(Mono.Cecil.AssemblyDefinition)">
      <summary>
            Gets all the <see cref="T:Mono.Cecil.TypeDefinition" /> important types for the modules in the
            provided <see cref="T:Mono.Cecil.AssemblyDefinition" /></summary>
      <param name="self">The <see cref="T:Mono.Cecil.AssemblyDefinition" /> to check.</param>
      <returns>lazy enumerator over the results</returns>
    </member>
    <member name="M:Lokad.Quality.AssemblyDefinitionExtensions.GetTypeReferences(Mono.Cecil.AssemblyDefinition)">
      <summary>
            Gets the type references for the modules in the provided <paramref name="assemblyDefinition" />.
            </summary>
      <param name="assemblyDefinition">The assembly definition.</param>
      <returns>lazy enumerator over the results</returns>
    </member>
    <member name="T:Lokad.Quality.CustomAttributeExtensions">
      <summary>
            Extension helpers for <see cref="T:Mono.Cecil.CustomAttribute" /></summary>
    </member>
    <member name="M:Lokad.Quality.CustomAttributeExtensions.Is``1(Mono.Cecil.CustomAttribute)">
      <summary>
            Checks by full name if the provided <paramref name="attribute" />
            matches the provided <typeparamref name="TAttribute" /></summary>
      <typeparam name="TAttribute">type to check against</typeparam>
      <param name="attribute">attribute to check</param>
      <returns>
        <c>true</c> if the specified attribute matches the type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Lokad.Quality.InstructionExtensions">
      <summary>
            Extension methods for <see cref="T:Mono.Cecil.Cil.Instruction" /></summary>
    </member>
    <member name="M:Lokad.Quality.InstructionExtensions.Creates``1(Mono.Cecil.Cil.Instruction)">
      <summary>
            Checks if the instruction creates the specified type
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="instruction">The instr.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Lokad.Quality.ModuleDefinitionExtensions">
      <summary>
            Extensions for the <see cref="T:Mono.Cecil.ModuleDefinition" /></summary>
    </member>
    <member name="M:Lokad.Quality.ModuleDefinitionExtensions.GetAssemblyReferences(Mono.Cecil.ModuleDefinition)">
      <summary>
            Gets the assembly references.
            </summary>
      <param name="moduleDefinition">The module definition.</param>
      <returns>lazy enumerator over the results</returns>
    </member>
    <member name="M:Lokad.Quality.ModuleDefinitionExtensions.GetModuleReferences(Mono.Cecil.ModuleDefinition)">
      <summary>
            Gets the module references.
            </summary>
      <param name="moduleDefinition">The module definition.</param>
      <returns>lazy enumerator over the results</returns>
    </member>
    <member name="T:Lokad.Quality.ParameterDefinitionExtensions">
      <summary>
            Helper extensions for the <see cref="T:Mono.Cecil.ParameterDefinition" /></summary>
    </member>
    <member name="M:Lokad.Quality.ParameterDefinitionExtensions.Is``1(Mono.Cecil.ParameterDefinition)">
      <summary>
            Checks by full name if the provided <paramref name="parameter" />
            matches the provided <typeparamref name="TType" /></summary>
      <typeparam name="TType">type to check against</typeparam>
      <param name="parameter">parameter to check</param>
      <returns>
        <c>true</c> if the specified parameter matches the type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Lokad.Quality.TypeDefinitionExtensions">
      <summary>
            Helper extensions for the <see cref="T:Mono.Cecil.TypeDefinition" /></summary>
    </member>
    <member name="M:Lokad.Quality.TypeDefinitionExtensions.GetInterfaces(Mono.Cecil.TypeDefinition)">
      <summary>
            Gets the interfaces.
            </summary>
      <param name="definition">The definition.</param>
      <returns>enumerator over the interfaces</returns>
    </member>
    <member name="M:Lokad.Quality.TypeDefinitionExtensions.GetFields(Mono.Cecil.TypeDefinition)">
      <summary>
            Retrieves fields for the <see cref="T:Mono.Cecil.TypeDefinition" /></summary>
      <param name="self">The type definition.</param>
      <returns>lazy collection of the fields</returns>
    </member>
    <member name="M:Lokad.Quality.TypeDefinitionExtensions.GetMethods(Mono.Cecil.TypeDefinition)">
      <summary>
            Gets the methods found on this <see cref="T:Mono.Cecil.TypeDefinition" />.
            Inheritance is not considered.
            </summary>
      <param name="definition">The definition.</param>
      <returns>lazy collection of methods</returns>
    </member>
    <member name="M:Lokad.Quality.TypeDefinitionExtensions.GetConstructors(Mono.Cecil.TypeDefinition)">
      <summary>
            Gets the constructors found on this <see cref="T:Mono.Cecil.TypeDefinition" />.
            Inheritance is not considered.
            </summary>
      <param name="definition">The definition.</param>
      <returns>lazy collection of methods</returns>
    </member>
    <member name="M:Lokad.Quality.TypeDefinitionExtensions.Resolve(Mono.Cecil.TypeDefinition)">
      <summary>
            Resolves the specified definition to <see cref="T:System.Type" />.
            </summary>
      <param name="definition">The definition.</param>
      <returns>.NET Type</returns>
    </member>
    <member name="M:Lokad.Quality.TypeDefinitionExtensions.Should(System.Collections.Generic.IEnumerable{Mono.Cecil.TypeDefinition},System.Predicate{Mono.Cecil.TypeDefinition})">
      <summary>
            Verifies that the specified <paramref name="check" /> is satisfied
            </summary>
      <param name="definitions">The definitions.</param>
      <param name="check">The check.</param>
      <returns>the same enumerable</returns>
      <exception cref="T:Lokad.Quality.QualityException">if any definitions do not pass the check</exception>
    </member>
    <member name="T:Lokad.Quality.MaintainabilityRules">
      <summary>
            Shared maintainability rules
            </summary>
    </member>
    <member name="M:Lokad.Quality.MaintainabilityRules.Ncca_Is_Used_Properly(System.Int32)">
      <summary>
            Ensures that <see cref="T:Lokad.Quality.NoCodeCoverageAttribute" /> is not used on complex methods.
            </summary>
      <param name="maxInstructions">Method is considered to be complex when number
            of IL instructions in it exceeds the <paramref name="maxInstructions" />.</param>
      <returns>new rule instance</returns>
    </member>
    <member name="M:Lokad.Quality.MaintainabilityRules.Immutable_Types_Should_Be_Immutable(Lokad.Quality.Codebase,Lokad.Rules.IScope)">
      <summary>
            Ensures that classes marked with <see cref="T:Lokad.Quality.ImmutableAttribute" /> have only
            readonly fields
            </summary>
      <param name="codebase">The codebase to run against.</param>
      <param name="scope">The scope to report to.</param>
    </member>
    <member name="T:Lokad.Quality.MethodDefinitionExtensions">
      <summary>
            Extensions for the <see cref="T:Mono.Cecil.MethodDefinition" /></summary>
    </member>
    <member name="M:Lokad.Quality.MethodDefinitionExtensions.GetInstructions(Mono.Cecil.MethodDefinition)">
      <summary>
            Gets the instructions for the specified method.
            </summary>
      <param name="method">The method.</param>
      <returns>enumerator over the instructions within the method</returns>
    </member>
    <member name="M:Lokad.Quality.MethodDefinitionExtensions.GetReferencedMethods(Mono.Cecil.MethodDefinition)">
      <summary>
            Gets the methods referenced from this <paramref name="definition" />.
            </summary>
      <param name="definition">The definition.</param>
      <returns>enumerator over the method references</returns>
    </member>
    <member name="M:Lokad.Quality.MethodDefinitionExtensions.GetParameters(Mono.Cecil.MethodDefinition)">
      <summary>
            Gets the parameters from the specified <paramref name="definition" />.
            </summary>
      <param name="definition">The definition to explore.</param>
      <returns>enumerator over the parameters</returns>
    </member>
    <member name="M:Lokad.Quality.MethodDefinitionExtensions.Has``1(Mono.Cecil.MethodDefinition)">
      <summary>
            Determines whether the provided <see cref="T:Mono.Cecil.MethodDefinition" /> 
            has specified attribute (matching is done by full name)
            </summary>
      <typeparam name="TAttribute">The type of the attribute.</typeparam>
      <param name="reference">The <see cref="T:Mono.Cecil.MethodDefinition" /> to check.</param>
      <returns>
        <c>true</c> if the specified attribute is found otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Lokad.Quality.MethodDefinitionExtensions.Should(System.Collections.Generic.IEnumerable{Mono.Cecil.MethodDefinition},System.Predicate{Mono.Cecil.MethodDefinition})">
      <summary>
            Verifies that the specified <paramref name="check" /> is satisfied
            </summary>
      <param name="definitions">The definitions.</param>
      <param name="check">The check.</param>
      <returns>the same enumerable</returns>
      <exception cref="T:Lokad.Quality.QualityException">if any definitions do not pass the check</exception>
    </member>
    <member name="T:Lokad.Quality.TypeReferenceExtensions">
      <summary>
            Helper extensions for the <see cref="T:Mono.Cecil.TypeReference" /></summary>
    </member>
    <member name="M:Lokad.Quality.TypeReferenceExtensions.Is``1(Mono.Cecil.TypeReference)">
      <summary>
            Determines whether the provided name has name mathcing to the <typeparamref name="TType" /></summary>
      <typeparam name="TType">type to compare with</typeparam>
      <param name="definition">The definition.</param>
      <returns>
        <c>true</c> if the specified definition matches the provided type, overwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Lokad.Quality.TypeReferenceExtensions.Has``1(Mono.Cecil.TypeReference)">
      <summary>
            Determines whether the provided <see cref="T:System.TypedReference" />
            has specified attribute (matching is done by full name)
            </summary>
      <typeparam name="TAttribute">The type of the attribute.</typeparam>
      <param name="self">The <see cref="T:Mono.Cecil.TypeDefinition" /> to check.</param>
      <returns>
        <c>true</c> if the type has the specified attribute otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Lokad.Quality.QualityAssert">
      <summary>
            Helper class for verifying code quality assertions.
            </summary>
    </member>
    <member name="M:Lokad.Quality.QualityAssert.TypesPass(System.Collections.Generic.IEnumerable{Mono.Cecil.TypeDefinition},System.Predicate{Mono.Cecil.TypeDefinition})">
      <summary>
            Verifies that every definition in the specified sequence passes <paramref name="check" />;
            </summary>
      <param name="definitions">The definitions.</param>
      <param name="check">The check.</param>
      <exception cref="T:Lokad.Quality.QualityException">if any definitions fail.</exception>
    </member>
    <member name="M:Lokad.Quality.QualityAssert.MethodsPass(System.Collections.Generic.IEnumerable{Mono.Cecil.MethodDefinition},System.Predicate{Mono.Cecil.MethodDefinition})">
      <summary>
            Verifies that every definition in the specified sequence passes <paramref name="check" />;
            </summary>
      <param name="definitions">The definitions.</param>
      <param name="check">The check.</param>
      <exception cref="T:Lokad.Quality.QualityException">if any definitions fail.</exception>
    </member>
    <member name="T:Lokad.Quality.QualityException">
      <summary>
            Exception thrown by rules checking code quality
            </summary>
    </member>
    <member name="M:Lokad.Quality.QualityException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Lokad.Quality.QualityException" /> class.
            </summary>
    </member>
    <member name="M:Lokad.Quality.QualityException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Lokad.Quality.QualityException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
  </members>
</doc>